on:
  push:
  pull_request:

name: Continuous integration

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: "${{ matrix.os == 'ubuntu-latest' && matrix.rust == 'nightly' && 'Tests+Miri' || 'Tests' }}-${{ matrix.os }}-${{ matrix.rust }} Rust"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [nightly, beta, stable]
    env:
      CARGO_TERM_COLOR: always
      # 20 MiB stack
      RUST_MIN_STACK: 50331648
      MIRIFLAGS: "-Zmiri-strict-provenance"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust
        run: |
          rustup set auto-self-update disable
          rustup toolchain install ${{ matrix.rust }} --profile minimal --component rustfmt,clippy
          rustup default ${{ matrix.rust }}
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          echo RUST_BACKTRACE=1 >> $GITHUB_ENV

      - name: build with cryptographically-insecure turned on (if available)
        run: cargo build --features cryptographically-insecure

      - name: Run tests with cryptographically-insecure turned on
        run: cargo test --features cryptographically-insecure

      - name: Run cargo check with all features
        run: cargo check --all-features

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: run Cargo clippy
        run: cargo clippy -- -D warnings -A deprecated

      - name: Install Miri on Ubuntu/nightly Rust only & run tests
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'nightly'
        run: |
          rustup component add miri
          cargo miri setup
          cargo miri test

  coverage:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Cinstrument-coverage -Clink-dead-code -Coverflow-checks=off"
      LLVM_PROFILE_FILE: "coverage/%p-%m.profraw"
      RUST_MIN_STACK: 50331648
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up Rust with coverage tools
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: llvm-tools-preview
    - name: Install grcov
      run: |
        curl -LsSf https://github.com/mozilla/grcov/releases/download/v0.8.19/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar xj
        sudo mv grcov /usr/local/bin/
    - name: Run tests with coverage
      run: |
        cargo clean
        cargo build --tests
        cargo test
    - name: Generate coverage report
      run: |
        mkdir -p coverage
        grcov . \
          --binary-path ./target/debug/ \
          --source-dir . \
          --output-type lcov \
          --branch \
          --ignore-not-existing \
          --ignore "/*/.cargo/**" \
          --ignore "target/**" \
          --output-path coverage/lcov.info
    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@v2.3.6
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      with:
        path-to-lcov: coverage/lcov.info

  android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    env:
      CARGO_TERM_COLOR: always
      # 20 MiB stack
      RUST_MIN_STACK: 50331648

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust
        run: |
          rustup set auto-self-update disable
          rustup toolchain install ${{ matrix.rust }} --profile minimal --component rustfmt,clippy
          rustup target add aarch64-linux-android
          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
          echo RUST_BACKTRACE=1 >> $GITHUB_ENV

      - name: Setup Android SDK
        uses: android-actions/setup-android@07976c6290703d34c16d382cb36445f98bb43b1f #3.2.0

      - name: Setup Android NDK
        run: sdkmanager "ndk;26.1.10909125"

      - name: Compile for Android
        run: |
          cargo install cargo-ndk
          cargo ndk -t aarch64-linux-android build

  # wasi:
  #   name: wasi
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       rust:
  #         - stable
  #         - beta
  #         - nightly
  #   env:
  #     # 20 MiB stack
  #     RUST_MIN_STACK: 20971520
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true

  #     - name: Install Rust
  #       run: |
  #         rustup set auto-self-update disable
  #         rustup toolchain install ${{ matrix.rust }} --profile minimal --component rustfmt clippy
  #         rustup default ${{ matrix.rust }}
  #         echo CARGO_TERM_COLOR=always >> $GITHUB_ENV
  #         echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV
  #         echo RUST_BACKTRACE=1 >> $GITHUB_ENV

  #     - name: Install WASI
  #       run: cargo install cargo-wasi
  #     - name: Install wasmtime
  #       run: curl https://wasmtime.dev/install.sh -sSf | bash
  #     - name: Install WASI SDK
  #       run: |
  #         wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sysroot-12.0.tar.gz
  #         tar -xvzf wasi-sysroot-12.0.tar.gz
  #         rm wasi-sysroot-12.0.tar.gz
  #     - name: Run tests
  #       run: |
  #         export WASI_SDK_DIR="$(pwd)/wasi-sysroot"
  #         export WASMTIME_HOME="$(pwd)/.wasmtime"
  #         export PATH="$WASMTIME_HOME/bin:$PATH"
  #         cargo wasi build --features cryptographically-insecure
  #         #cargo wasi test -- --nocapture

#  vim: set ft=yaml ts=2 sw=2 tw=0 et :
